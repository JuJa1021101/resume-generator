# Docker Compose配置文件
version: '3.8'

services:
  # 前端应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
        VITE_BUILD_TIME: ${BUILD_TIME:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VITE_GIT_COMMIT: ${GIT_COMMIT:-unknown}
    container_name: ai-resume-app
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - BUILD_TIME=${BUILD_TIME}
      - GIT_COMMIT=${GIT_COMMIT}
      - APP_VERSION=${APP_VERSION:-1.0.0}
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/default.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-resume-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-resume.rule=Host(`ai-resume.com`)"
      - "traefik.http.routers.ai-resume.tls=true"
      - "traefik.http.routers.ai-resume.tls.certresolver=letsencrypt"

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: ai-resume-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-resume-network

  # Nginx负载均衡器（多实例部署）
  nginx-lb:
    image: nginx:alpine
    container_name: ai-resume-lb
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - ai-resume-network

volumes:
  redis_data:
    driver: local

networks:
  ai-resume-network:
    driver: bridge